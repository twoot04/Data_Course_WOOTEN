ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(color = "salmon", size = 4, shape = 20) +
geom_smooth(method = "lm", color = "magenta",formula = y ~ x^30)
# Add another geom ... a trendline:
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(color = "salmon", size = 4, shape = 20) +
geom_smooth(method = "lm", color = "magenta",formula = y ~ x^log(x))
# Add another geom ... a trendline:
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(color = "salmon", size = 4, shape = 20) +
geom_smooth(method = "lm", color = "magenta",formula = y ~ x^log(x))
# Add another geom ... a trendline:
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(color = "salmon", size = 4, shape = 20) +
geom_smooth(method = "lm", color = "magenta",se = FALSE)
# Add another geom ... a trendline:
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(color = "salmon", size = 4, shape = 20) +
geom_smooth(method = "lm", color = "magenta", fill = 'green')
# Store your plot as an object to add to...
p <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method = "lm")
# Zoom in
p + lims(x=c(0,0.1),y=c(0,1000000)) # what did this do?
p + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) # how is this different?
p
# Zoom in
p + lims(x=c(0,0.1),y=c(0,1000000)) # what did this do?
p + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) # how is this different?
# Zoom in
?p + lims(x=c(0,0.1),y=c(0,1000000)) # what did this do?
# Zoom in
?p + lims(x=c(0,0.1),y=c(0,1000000)) # what did this do?
?p + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) # how is this different?
# Zoom in
p + ?lims(x=c(0,0.1),y=c(0,1000000)) # what did this do?
p + ?coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) # how is this different?
?coord_cartesian
lims
# Store this new zoomed-in plot
p2 <- p + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))
# Add Title and Labels:
p2 + labs(title="Area Vs Population",
subtitle="From midwest dataset",
y="Population",
x="Area",
caption="Midwest Demographics")
# Nifty!  So here's the full function call to make this plot:
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() +
geom_smooth(method="lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Change color of points and line to static values:
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(color="steelblue",size=3) +
geom_smooth(method="lm",color="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Here's where ggplot gets really cool...
# Suppose if we want the color to change based on another column in the source dataset,
# we can specify "color" inside the "aesthetic" aes() function.
p3 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(color=state),size=3) +
geom_smooth(method="lm",color="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
p3
# Don't like those colors?
p3 + scale_color_brewer(palette = "Set1")
p3 + scale_color_grey()
p3 + scale_color_distiller()
p3 + scale_color_viridis_d()
p3 + scale_color_viridis_d(option = 'mako')
p3 + scale_color_viridis_d(option = 'mako', end='.8')
p3 + scale_color_viridis_d(option = 'mako', end=.8)
p3 + scale_color_viridis_d(option = 'mako', end=.8) +
theme_dark()
p3 + scale_color_viridis_d(option = 'mako', end=.8) +
theme(plot.background = element_rect(fill="black"))
p3 + scale_color_viridis_d(option = 'mako', end=.8)
# Want more color choices? You can check them out in the RColorBrewer package, or even make your own
library(RColorBrewer)
brewer.pal.info
# Make your own and take a peek at it:
library(colorblindr)
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44","#b3bf2d",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000")
palette_plot(pal)
# You can even check to see if your color choices would work for someone who has colorblindness...
cvd_grid(palette_plot(pal))
# Our plot with my custom color palette
p3 + scale_color_manual(values=pal)
# Other neat tricks:
p3 + scale_x_reverse()
p3 + theme_minimal()
p3 + theme_dark()
# You can also transform your data right in ggplot:
p4 = ggplot(midwest, aes(x=area/max(midwest$area), y=log10(poptotal))) +
geom_point(aes(color=state),size=3) +
geom_smooth(method="lm",color="firebrick") +
labs(title="Area Vs Population", subtitle="From midwest dataset", color = "State",
y="log10 Population", x="Area (proportion of max)", caption="Midwest Demographics") +
theme_minimal() +
scale_color_manual(values=pal)
p4
# Want to divide up your plot into multiple ones based on a categorical variable?
p4 + facet_wrap(~ state)
p4 + facet_wrap(~ state, scales = "free") + theme(legend.position = "none")
p4 + facet_wrap(~ state) + theme(legend.position = "none", strip.text.x = element_text(size = 12, face="bold"))
p4 + facet_wrap(~ state) + theme(legend.position = "none",
strip.text.x = element_text(size = 12, face="bold"),
strip.background = element_rect(fill = "lightblue"))
p4 + facet_wrap(~ state,scales = 'free') + theme(legend.position = "none",
strip.text.x = element_text(size = 12, face="bold"),
strip.background = element_rect(fill = "lightblue"))
# Some other "geom" types ... for categorical x axis
p5 = ggplot(midwest, aes(x=state,y=percollege, fill=state)) + labs(x="State",y="Percent with college degree")
p5
p5 + geom_boxplot()
p5 + geom_violin()
p5 + geom_bar(stat="identity") # something wrong with this picture!
p5 + geom_boxplot()
p5 + geom_point()
p5 + geom_boxplot()
p5 + geom_violin()
p5 + geom_bar(stat="identity") # something wrong with this picture!
p5 + geom_col()
# Geoms for looking at a single variable's distribution:
library(carData)
data("MplsStops")
library(tidyverse)
dat <- read(mtcars)
data(mtcars)
View(mtcars)
dat <- data(mtcars)
head(dat)
dat[6,]
dat(6,)
mtcars96,
mtcars(6,)
dat <- mtcars
dat(10,)
dat[10,]
summary(dat)
mean(dat)
mpg <- dat$mpg
mean(mpg)
median(mpg)
min(mpg)
max(mpg)
hp <- dat$hp
min(hp)
max(hp)
hist(mpg)
plot( x = "Horsepower", y = "Miles Per Gallon")
data(mtcars)
dat <- mtcars
mpg <- dat$mpg
hp <- dat$hp
dat [5,]
dat[,5]
small_engines <- dat$cyl % 4 or 6%
small_engines <- dat[dat$cyl %in% c(4,6),]
small_engines <- dat[dat$cyl %in% c(4,6),]
small_gears <- dat[dat$gear %in% c(4,5),]
small_engines
small_gears
toyota_corolla <- dat[rownames(dat) == "Toyota Corolla",]
seleected_cars <- dat[rownames(dat) %in% c("Mazda RX4", "Ford Pantera L"),]
dat2<- dat[, !(colnames(dat) %in% c("vs", "am"))]
dat3 <- dat[, !(rownames(dat$) == 3)]
dat_no_3_gears <- dat[dat$gear !=3,]
# Load the dataset
data(mtcars)
dat <- mtcars
# Assign mpg and hp columns to variables
mpg <- dat$mpg
hp <- dat$hp
# Extract the 5th row
dat[5,]
# Extract the 5th column (hp)
dat[,5]
# Select cars with 4 or 6 cylinders
small_engines <- dat[dat$cyl %in% c(4,6),]
# Select cars with 4 or 5 gears
small_gears <- dat[dat$gear %in% c(4,5),]
# Find Toyota Corolla
toyota_corolla <- dat[rownames(dat) == "Toyota Corolla",]
# Select Mazda RX4 and Ford Pantera L
selected_cars <- dat[rownames(dat) %in% c("Mazda RX4", "Ford Pantera L"),]
# Create a new dataset excluding the vs and am columns
dat2 <- dat[, !(colnames(dat) %in% c("vs", "am"))]
# Create a dataset with cars excluding those with 3 gears
dat_no_3_gears <- dat[dat$gear != 3,]
# Print results to view them
print(small_engines)
print(small_gears)
print(toyota_corolla)
print(selected_cars)
print(dat2)
print(dat_no_3_gears)
library(tidyberse)
data("mtcars")
data(mtcars)
dat <- mtcars
mpg <- dat$mpg
wt <- dat$wt
dat[3,]
last_5_rows <- tail(dat,5)
major_hp <- dat[dat(dat$hp) > 100,]
major_hp <- dat[dat$hp > 100,]
small_engines <- dat[dat$cyl == 3,]
big_cars <- dat[dat$hp >200, dat$wt < 3]
big_cars <- dat[dat$hp >200 & dat$wt < 3, ]
Datsun_710 <- dat[rownames(dat) == "Datsun 710",]
Chevy_Ford <- dat[rownames(dat) %in% c("Chevrole Chevell Malibu", "Ford Mustant"),]
dat3 <- dat[, !(colnames(dat) %in% c("drat","qsec"))]
dat_no_4_cyl <- dat[, !(dat$cyl == 4)]
dat_no_4_cyl <- dat[dat$cyl !=4,]
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data = mtcars, aes(x = hp, y = mpg)) + geom_point()
ggplot(data = mtcars, aes(x = hp, y = mpg)) + geom_point()
?ggplot
ggpplot()
ggplot2()
ggplot( mapping = aes(x = hp, y = mpg)) + geom_point()
install.packages(ggplot)
install.packages("ggplot2")
ggplot(data = mtcars, aes(x = hp, y = mpg)) + geom_point()
ggplot( mapping = aes(x = hp, y = mpg)) + geom_point()
dat <- mtcars
ggplot2::aes(x = mtcars$hp, y = mtcars$mpg)
ggplot(data = faithful,
mapping = aes(x = eruptions,
y = waiting)) = geom_point
ggplot(data = faithful,
mapping = aes(x = eruptions,
y = waiting)) +
geom_point
ggplot(data = faithful,
mapping = aes(x = eruptions,
y = waiting)) +
geom_point
ggplot(data = faithful,
mapping = aes(x = eruptions,
y = waiting)) +
geom_point()
ggplot(data = faithful,
mapping = aes(x = eruptions,
y = waiting))
library(tidyverse)
ggplot(data = faithful,
mapping = aes(x = eruptions,
y = waiting))
ggplot(data = faithful,
mapping = aes(x = eruptions,
y = waiting)) +
geom_plot()
ggplot(data = faithful,
mapping = aes(x = eruptions,
y = waiting)) +
geom_point()
ggplot(faithful) +
geom_point(aes(x = eruptions,
y = waiting,
colour = eruptions <3))
ggplot(faithful) +
geom_point(aes(x = eruptions,
y = waiting,
colour = "steelblue"))
colour = "steelblue")
ggplot(faithful) +
geom_point(aes(x = eruptions,
y = waiting),
colour = "steelblue")
ggplot(faithful) +
geom_histogram(aes(x = euruptions))
ggplot(faithful) +
geom_histogram(aes(x = eruptions))
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_density_2d() +
geom_point()
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting), shape = 'square', alpha = 0.3)
geom_histogram(aes(x = eruptions), color = eruptions < 3.1)
geom_histogram(aes(x = eruptions), color = eruptions < 3.1)
ggplot(faithful)
ggplot(faithful) +
geom_histogram(aes(x = eruptions), color = eruptions < 3.1)
ggplot(faithful) +
geom_histogram(aes(x = eruptions), color = eruptions < 3.1)
ggplot(faithful) +
geom_histogram(aes(x = eruptions,
color = eruptions < 3.1))
ggplot(faithful) +
geom_histogram(aes(x = eruptions,
fill = eruptions < 3.1))
ggplot(faithful) +
geom_histogram(aes(x = eruptions, color = eruptions < 60))
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill = waiting < 60))
ggplot(faithful) +
geom_histogram(aes(x = eruptions,
fill = waiting < 60),
position = "identity")
ggplot(faithful) +
geom_histogram(aes(x = eruptions,
fill = waiting < 60),
position = "identity", alpha = 0.3)
ggplot(faithful) +
geom_histogram(aes(x = eruptions,
fill = waiting < 60),
position = "dodge", alpha = 0.3)
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting)) +
geom_abline(slope = -40, intercept = 150)
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting)) +
geom_abline(slope = -40, intercept = 200)
ggplot(mgp) +
geom_bar(aes(x = class))
data(mtcars)
dat <- mtcars
ggplot(mpg) +
geom_bar(aes(x = class))
mpg_counted <- mpg %>%
count(class, name = 'count')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count),
stat = 'identity')
ggplot(mpg) +
geom_bar(
aes(
x = class,
y = after_stat(100 * count / sum(count))
)
)
x <- 10
y <- 5
x + y
x - y
x * y
x/y
v <- (1:100)
mean(v)
median(v)
sd(v)
even(v)
even_numbers <- v[v %% 2 == 0]
check_number <- function(num) {
if (num > 0) {
return("Positive")
} else if (num < 0 ){
return("Negative")
} else {
return("Zero")
}
}
for (i in 1:10) {
pritn(i)
}
print(i)
data("population")
dat <- population
data("starwars")
dat <- starwars
dat
large <- dat[dat$height > 80,]
large
data("mtcars")
dat <- mtcars
not_gas_guzzlers <- dat[dat$mpg > 20]
not_gas_guzzlers <- dat[dat$mpg > 20,]
write_csv(not_gas_guzzlers, "not_gas_guzzlers.csv", row.names = TRUE)
write_csv(not_gas_guzzlers, "not_gas_guzzlers.csv")
file.remove("not_gas_guzzlers.csv")
library(tidyverse)
ggplot(mtcars) +
geom_point(aes(x = mpg, y = hp))
ggplot(mtcars) +
geom_point(aes(x = mpg, y = hp, color = factor(cyl)))
ggplot(mtcars) +
geom_point(aes(x = mpg, y = hp,
size = wt,
color = factor(cyl))) +
geom_point(alpha = 0.7)
ggplot(mtcars) +
geom_point(aes(x = mpg, y = hp,
size = wt,
color = factor(cyl),alpha = 0.7))
ggplot(mtcars) +
geom_histogram(x = mpg)
ggplot(mtcars) +
geom_histogram(aes(x = mpg))
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(bindwidth = 2, fill = "steelblue",
color = "black",
alpha = 0.7) +
labs(title = "Distribution of Miles Per Gallon (MPG)",
x = "Miles Per Gallon (MPG",
y = "Count") +
theme_minimal()
12 <- a
a <- 12
b <- 3
sum(a+b)
a-b
a*b
a/b
v <- c(5,10,15,20,25)
mean(v)
median(v)
sd(v)
data(mtcars)
df <- mtcars
mgp <- dat$mpg
hp <- dat$hp
slow_ass_cars <- dat[dat$hp < 100]
slow_ass_cars <- dat[dat$hp < 100,]
selected_data <- mtcars[, c("mpg", "hp", "cycl")]
ggplot(mtcars) +
geom_histogram( x = wt)
geom_histogram(aes(x = wt)
ggplot(mtcars) +
ggplot(mtcars) +
geom_histogram(aes(x = wt))
ggplot(mtcars) +
geom_histogram(aes(x = wt), color = "violet")
ggplot(mtcars) +
geom_histogram(aes(x = wt), color = "violet", fill = true)
ggplot(mtcars) +
geom_histogram(aes(x = wt), color = "violet", fill = "violet")
ggplot(mtcars) +
geom_histogram(aes(x = wt), color = "violet", fill = "violet",
alpha = .8)
data(iris)
dat<- iris
petal_length <- iris$Petal.Length
petal_width <- iris$Petal.Width
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length))+
theme_minimal()+
labs( title = "Petal Factors"
x = "Petal Width"
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length))+
theme_minimal()
labs( title = "Petal Factors"
x = "Petal Width"
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length))+
theme_minimal()+
labs(title = "Petal Factors"
x = "Petal Width"
theme(axis.text = element_text(color = black, size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length, \))+
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length))+
theme_minimal()+
theme(axis.text = element_text(color = "black", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length))+
theme_minimal()+
theme(axis.text = element_text(color = "purple", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length))+
theme_minimal()+
theme(axis.text.x = element_text(color = "purple", size = 8)
axis.text.y = element_text(color = "green", size = 12))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length))+
theme_minimal()+
theme(axis.text = element_text(color = "purple", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length, color = "violet", alpha = 0.5))+
theme_minimal()+
theme(axis.text = element_text(color = "purple", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length), color = "violet", alpha = 0.5))+
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length), color = "violet", alpha = 0.5)+
theme_minimal()+
theme(axis.text = element_text(color = "purple", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length),
color = "violet", alpha = 0.5) +
theme_minimal()+
theme(axis.text = element_text(color = "black", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length),
color = "violet", alpha = 0.8) +
theme_minimal()+
theme(axis.text = element_text(color = "black", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length),
color = "blue", alpha = 0.8) +
theme_minimal()+
theme(axis.text = element_text(color = "black", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length),
color = "violet", alpha = 0.8) +
theme_minimal()+
theme(axis.text = element_text(color = "black", size = 8))
ggplot(iris) +
geom_point(aes(x = petal_width, y = Petal.Length),
color = "violet", alpha = 0.5) +
theme_minimal()+
theme(axis.text = element_text(color = "black", size = 8))
